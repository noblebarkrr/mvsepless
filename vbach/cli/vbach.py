
import gc
import os
import re
import datetime
import gradio as gr
import torch
import librosa
import tempfile
from datetime import datetime
import argparse
from vbach.infer.infer import Config, load_hubert, get_vc, rvc_infer
from vbach.utils.model_manager import model_manager
from vbach.utils.audio_utils import Audio

MAX_LENGTH_NAME = 255

audio = Audio()

OUTPUT_FORMAT = audio.output_formats
input_formats = audio.input_formats

def check_audio_file(file_path):
    if file_path.endswith(tuple([f".{of}" for of in input_formats])):
        streams = audio.get_info(file_path)
        if len(list(streams.keys())) == 0:
            return False
        else:
            return True
    else:
        return False

def clean_filename(filename, length=240):
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
    universal_forbidden = r"\\/*?:<>|"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≤ Linux
    linux_forbidden = r"&;~\'`()[]$#^%!"

    # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    forbidden_chars = set(universal_forbidden + linux_forbidden)

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = "".join(c for c in filename if c not in forbidden_chars)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    cleaned = cleaned.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ Windows
    reserved_windows = {
        "CON",
        "AUX",
        "COM1",
        "COM2",
        "COM3",
        "COM4",
        "LPT1",
        "LPT2",
        "LPT3",
        "PRN",
        "NUL",
    }

    # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    if cleaned.upper() in reserved_windows:
        cleaned = f"file_{cleaned}"
    if len(cleaned) > length:
        return f"{cleaned[:length // 2]}...{cleaned[-(length // 3):]}"
    return cleaned

def remove_duplicate_keys(input_str, keys=("NAME", "MODEL", "PITCH", "F0METHOD", "DATETIME")):
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    seen = set()
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–±–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–π
    pattern = r"({})".format("|".join(re.escape(key) for key in keys))

    def replace(match):
        key = match.group(1)
        if key in seen:
            return ""  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        seen.add(key)
        return key  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ

    # –ó–∞–º–µ–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    result = re.sub(pattern, replace, input_str)
    return result


def shorter_name(template, file_name, pitch, method_pitch, model_name, date_time):
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–π –≤ —à–∞–±–ª–æ–Ω–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    clean_template = remove_duplicate_keys(template)

    str_pitch = str(pitch)
    template_no_keys_length = len(
        clean_template.replace("NAME", "")
        .replace("MODEL", "")
        .replace("PITCH", "")
        .replace("F0METHOD", "")
        .replace("DATETIME", "")
    )
    key_values_length = (
        len(model_name)
        if "MODEL" in clean_template
        else (
            0 + len(method_pitch)
            if "F0METHOD" in clean_template
            else 0 + len(str_pitch) if "PITCH" in clean_template else 0 + len(date_time) if "DATETIME" in clean_template else 0
        )
    )
    free_length = MAX_LENGTH_NAME - (template_no_keys_length + key_values_length)
    if len(file_name) > (free_length - 7):
        shorted_name = f"{file_name[:(free_length // 2)]}...{file_name[-((free_length // 2) - 7):]}"
        return shorted_name
    else:
        return file_name

def output_file_template(template, file_name, pitch, method_pitch, model_name):
    
    clean_template = remove_duplicate_keys(template)

    time_create_file = datetime.now().strftime("%Y%m%d_%H%M%S")

    input_file_name = shorter_name(
        clean_template, file_name, pitch, method_pitch, model_name, time_create_file
    )
    template_name = (
        clean_template.replace("MODEL", f"{model_name}")
        .replace("DATETIME", f"{time_create_file}")
        .replace("PITCH", f"{pitch}")
        .replace("F0METHOD", f"{method_pitch}")
        .replace("NAME", f"{input_file_name}")
    )
    output_name = f"{template_name}"
    return output_name

def short_name(name):
    if len(name) > (MAX_LENGTH_NAME - 15):
        return f"{name[:150]}...{name[-20:]}"
    else:
        return name

def load_rvc_model(voice_model):

    if voice_model in model_manager.parse_voice_models():
        rvc_model_path, rvc_index_path = model_manager.parse_pth_and_index(voice_model)

        if not rvc_model_path:
            raise ValueError(
                f"[91m–§–∞–π–ª–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {voice_model} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ—ë —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏.[0m"
            )

    else:
        raise ValueError(
            f"[91m–ú–æ–¥–µ–ª–∏ {voice_model} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è.[0m"
        )

    return rvc_model_path, rvc_index_path

def voice_conversion(
    voice_model,
    vocals_path,
    output_path,
    pitch,
    f0_method,
    index_rate,
    filter_radius,
    volume_envelope,
    protect,
    hop_length,
    f0_min,
    f0_max,
    format_output,
    output_bitrate,
    stereo_mode,
    hubert_path=None
):
    rvc_model_path, rvc_index_path = load_rvc_model(voice_model)

    config = Config()
    hubert_model = load_hubert(config.device, config.is_half, hubert_path if hubert_path else model_manager.hubert_path)
    cpt, version, net_g, tgt_sr, vc = get_vc(
        config.device, config.is_half, config, rvc_model_path
    )

    output_audio = rvc_infer(
        rvc_index_path,
        index_rate,
        vocals_path,
        output_path,
        pitch,
        f0_method,
        cpt,
        version,
        net_g,
        filter_radius,
        tgt_sr,
        volume_envelope,
        protect,
        hop_length,
        vc,
        hubert_model,
        f0_min,
        f0_max,
        format_output,
        output_bitrate,
        stereo_mode
    )

    del hubert_model, cpt, net_g, vc
    gc.collect()
    torch.cuda.empty_cache()
    return output_audio

def cli_conversion(input_audios, template="NAME_MODEL_F0METHOD_PITCH", output_dir="output", model_name="", index_rate=0, output_format="wav", stereo_mode="mono", method_pitch="rmvpe+", pitch=0, hop_length=128, filter_radius=3, rms=0.25, protect=0.33, f0_min=50, f0_max=1100, hubert_path=None):
    if not input_audios:
        raise ValueError(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª(—ã). "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ –Ω–µ–º—É."
        )
    if not model_name:
        raise ValueError("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")
    if not os.path.exists(input_audios):
        raise ValueError(f"–§–∞–π–ª {input_audios} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if not os.path.exists(input_audios):
        raise FileNotFoundError(f"–û—à–∏–±–∫–∞: '{input_audios}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    os.makedirs(output_dir, exist_ok=True)

    if os.path.isfile(input_audios):
        if not check_audio_file(input_audios):
            raise ValueError(f"–û—à–∏–±–∫–∞: '{input_audios}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º.")
        print(f"–ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {input_audios}")

        try:
            file_name = os.path.basename(input_audios)
            namefile = os.path.splitext(file_name)[0]
            time_create_file = datetime.now().strftime("%Y%m%d_%H%M%S")
            template = clean_filename(template, length=200)
            output_name = template
            output_path = os.path.join(output_dir, f"{output_name}.{output_format}")
            voice_conversion(voice_model=model_name, 
                             vocals_path=input_audios, 
                             output_path=output_path, 
                             pitch=pitch, 
                             f0_method=method_pitch, 
                             index_rate=index_rate, 
                             filter_radius=filter_radius, 
                             volume_envelope=rms, 
                             protect=protect, 
                             hop_length=hop_length, 
                             f0_min=f0_min, 
                             f0_max=f0_max, 
                             format_output=output_format, 
                             output_bitrate="320k", 
                             stereo_mode=stereo_mode, 
                             hubert_path=hubert_path)
        finally:
            if os.path.exists(output_path):
                print("–í–æ–∫–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω")  
    
    elif os.path.isdir(input_audios):
        # –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        list_files = []
        for file in os.listdir(input_audios):
            abs_path_file = os.path.join(input_audios, file)
            if os.path.isfile(abs_path_file) and check_audio_file(abs_path_file):
                list_files.append(abs_path_file)

        if not list_files:
            raise FileNotFoundError(f"–û—à–∏–±–∫–∞: –≤ –ø–∞–ø–∫–µ '{input_audios}' –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.")

        print(f"–ù–∞–π–¥–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã: {list_files}")

        try:
            output_paths = []
            for i, file in enumerate(list_files):
                print(f"–§–∞–π–ª {i + 1}/{len(list_files)}")
                file_name = os.path.basename(file)
                namefile = os.path.splitext(file_name)[0]
                template = clean_filename(template, length=50)
                if "NAME" not in template:
                    template = f"{template}_NAME"
                output_name = output_file_template(template, namefile, pitch, method_pitch, model_name)
                output_path = os.path.join(output_dir, f"{output_name}.{output_format}")
                voice_conversion(voice_model=model_name, 
                                vocals_path=file, 
                                output_path=output_path, 
                                pitch=pitch, 
                                f0_method=method_pitch, 
                                index_rate=index_rate, 
                                filter_radius=filter_radius, 
                                volume_envelope=rms, 
                                protect=protect, 
                                hop_length=hop_length, 
                                f0_min=f0_min, 
                                f0_max=f0_max, 
                                format_output=output_format, 
                                output_bitrate="320k", 
                                stereo_mode=stereo_mode, 
                                hubert_path=hubert_path)
                if os.path.exists(output_path):
                    output_paths.append(output_path)
                
        finally:
            print("–í–æ–∫–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã")     
    else:
        raise ValueError(f"–û—à–∏–±–∫–∞: '{input_audios}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ —Ñ–∞–π–ª–æ–º, –Ω–∏ –ø–∞–ø–∫–æ–π.")

def setup_args():
    parser = argparse.ArgumentParser(description='Vbach CLI')
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        'input_audios',
        type=str,
        help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    parser.add_argument(
        'output_dir',
        type=str,
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'
    )
    parser.add_argument(
        'model_name',
        type=str,
        help='–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ RVC –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
    )
    
    # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    parser.add_argument(
        '--output_name',
        type=str,
        default="",
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–º–µ–Ω—ã: DATETIME, NAME, MODEL, F0METHOD, PITCH)'
    )
    parser.add_argument(
        '--index_rate',
        type=float,
        default=0,
        help='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Ç 0.0 –¥–æ 1.0)',
        metavar='[0.0-1.0]'
    )
    parser.add_argument(
        '--output_format',
        type=str,
        default="wav",
        choices=OUTPUT_FORMAT,
        help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞'
    )
    parser.add_argument(
        '--stereo_mode',
        type=str,
        default="mono",
        choices=["mono", "left/right", "sim/dif"],
        help='–†–µ–∂–∏–º –∫–∞–Ω–∞–ª–æ–≤: –º–æ–Ω–æ –∏–ª–∏ —Å—Ç–µ—Ä–µ–æ'
    )
    parser.add_argument(
        '--method_pitch',
        type=str,
        default="rmvpe+",
        help='–ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è pitch (—Ç–æ–Ω–∞)'
    )
    parser.add_argument(
        '--pitch',
        type=int,
        default=0,
        help='–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–Ω–∞ –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö'
    )
    parser.add_argument(
        '--hop_length',
        type=int,
        default=128,
        help='–î–ª–∏–Ω–∞ hop (–≤ —Å–µ–º–ø–ª–∞—Ö) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    parser.add_argument(
        '--filter_radius',
        type=int,
        default=3,
        help='–†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è'
    )
    parser.add_argument(
        '--rms',
        type=float,
        default=0.25,
        help='–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥–∏–±–∞—é—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (RMS)'
    )
    parser.add_argument(
        '--protect',
        type=float,
        default=0.33,
        help='–ó–∞—â–∏—Ç–∞ –¥–ª—è –≥–ª—É—Ö–∏—Ö —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –∑–≤—É–∫–æ–≤'
    )
    parser.add_argument(
        '--f0_min',
        type=int,
        default=50,
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ pitch (F0) –≤ Hz'
    )
    parser.add_argument(
        '--f0_max',
        type=int,
        default=1100,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ pitch (F0) –≤ Hz'
    )
    parser.add_argument(
        '--hubert_path',
        type=str,
        default="",
        help='–ü—É—Ç—å –∫ hubert'
    )
    return parser.parse_args()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    args = setup_args()
    cli_conversion(
        input_audios=args.input_audios,
        output_dir=args.output_dir,
        model_name=args.model_name,
        template=args.output_name,
        index_rate=args.index_rate,
        output_format=args.output_format,
        stereo_mode=args.stereo_mode,
        method_pitch=args.method_pitch,
        pitch=args.pitch,
        hop_length=args.hop_length,
        filter_radius=args.filter_radius,
        rms=args.rms,
        protect=args.protect,
        f0_min=args.f0_min,
        f0_max=args.f0_max,
        hubert_path=args.hubert_path
    )



